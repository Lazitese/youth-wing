import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/components/ui/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, Search, Plus, Pencil, Trash } from "lucide-react";
import { Database } from "@/types/supabase";

type Job = Database['public']['Tables']['jobs']['Row'];
type JobInsert = Database['public']['Tables']['jobs']['Insert'];

export const JobsList = () => {
  const [jobs, setJobs] = useState<Job[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedType, setSelectedType] = useState<string>("all");
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);
  const [formData, setFormData] = useState<JobInsert>({
    title: "",
    description: "",
    requirements: "",
    responsibilities: "",
    location: "",
    job_type: "full_time",
    deadline: new Date().toISOString().split('T')[0],
  });
  const { toast } = useToast();

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from("jobs")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) throw error;

      setJobs(data || []);
    } catch (error) {
      console.error("Error fetching jobs:", error);
      toast({
        title: "·àµ·àÖ·â∞·âµ",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãé·âΩ·äï ·àò·å´·äï ·ä†·àç·â∞·âª·àà·àù",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddJob = async () => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from("jobs")
        .insert([formData]);

      if (error) throw error;

      toast({
        title: "·â∞·à≥·ä≠·â∑·àç",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·å®·àù·àØ·àç",
      });

      setShowAddDialog(false);
      setFormData({
        title: "",
        description: "",
        requirements: "",
        responsibilities: "",
        location: "",
        job_type: "full_time",
        deadline: new Date().toISOString().split('T')[0],
      });
      fetchJobs();
    } catch (error) {
      console.error("Error adding job:", error);
      toast({
        title: "·àµ·àÖ·â∞·âµ",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç·äï ·àò·å®·àò·à≠ ·ä†·àç·â∞·âª·àà·àù",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleEditJob = async () => {
    if (!selectedJob) return;

    try {
      setLoading(true);
      const { error } = await supabase
        .from("jobs")
        .update(formData)
        .eq("id", selectedJob.id);

      if (error) throw error;

      toast({
        title: "·â∞·à≥·ä≠·â∑·àç",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·ãò·àù·äó·àç",
      });

      setShowEditDialog(false);
      setSelectedJob(null);
      fetchJobs();
    } catch (error) {
      console.error("Error updating job:", error);
      toast({
        title: "·àµ·àÖ·â∞·âµ",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç·äï ·àõ·ãò·àò·äï ·ä†·àç·â∞·âª·àà·àù",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteJob = async () => {
    if (!selectedJob) return;

    try {
      setLoading(true);
      const { error } = await supabase
        .from("jobs")
        .delete()
        .eq("id", selectedJob.id);

      if (error) throw error;

      toast({
        title: "·â∞·à≥·ä≠·â∑·àç",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·à∞·à≠·ãü·àç",
      });

      setShowDeleteDialog(false);
      setSelectedJob(null);
      fetchJobs();
    } catch (error) {
      console.error("Error deleting job:", error);
      toast({
        title: "·àµ·àÖ·â∞·âµ",
        description: "·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç·äï ·àò·à∞·à®·ãù ·ä†·àç·â∞·âª·àà·àù",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const getFilteredJobs = () => {
    return jobs.filter(job => {
      const matchesSearch = 
        job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        job.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (job.location?.toLowerCase() || "").includes(searchQuery.toLowerCase());
      
      const matchesType = selectedType === "all" || job.job_type === selectedType;
      
      return matchesSearch && matchesType;
    });
  };

  const filteredJobs = getFilteredJobs();

  const getJobTypeText = (type: string) => {
    switch (type) {
      case "full_time":
        return "·àô·àâ ·åä·ãú";
      case "part_time":
        return "·âµ·à≠·çç ·åä·ãú";
      case "contract":
        return "·äÆ·äï·âµ·à´·âµ";
      case "internship":
        return "·àç·àù·àù·ãµ";
      default:
        return type;
    }
  };

  const getJobTypeColorClass = (type: string) => {
    switch (type) {
      case "full_time":
        return "bg-blue-100 text-blue-800";
      case "part_time":
        return "bg-purple-100 text-purple-800";
      case "contract":
        return "bg-amber-100 text-amber-800";
      case "internship":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  if (loading) {
    return (
      <div className="flex h-full items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-gov-blue" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-500" />
            <Input
              type="search"
              placeholder="·çà·àç·åç..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          <Select value={selectedType} onValueChange={setSelectedType}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="·ã®·àµ·à´ ·ä†·ã≠·äê·âµ" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">·àÅ·àâ·àù</SelectItem>
              <SelectItem value="full_time">·àô·àâ ·åä·ãú</SelectItem>
              <SelectItem value="part_time">·âµ·à≠·çç ·åä·ãú</SelectItem>
              <SelectItem value="contract">·äÆ·äï·âµ·à´·âµ</SelectItem>
              <SelectItem value="internship">·àç·àù·àù·ãµ</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Button onClick={() => setShowAddDialog(true)}>
          <Plus className="mr-2 h-4 w-4" />
          ·ä†·ã≤·àµ ·àµ·à´
        </Button>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {filteredJobs.map((job) => (
          <Card key={job.id}>
            <CardHeader>
              <CardTitle>{job.title}</CardTitle>
              <CardDescription>
                <span className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${getJobTypeColorClass(job.job_type)}`}>
                  {getJobTypeText(job.job_type)}
                </span>
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600 line-clamp-3">{job.description}</p>
              {job.location && (
                <p className="mt-2 text-sm text-gray-500">üìç {job.location}</p>
              )}
              <p className="mt-2 text-sm text-gray-500">
                ‚è∞ ·ã®·àò·å®·à®·àª ·âÄ·äï: {new Date(job.deadline).toLocaleDateString('am-ET')}
              </p>
            </CardContent>
            <CardFooter className="flex justify-end gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setSelectedJob(job);
                  setFormData({
                    title: job.title,
                    description: job.description,
                    requirements: job.requirements || "",
                    responsibilities: job.responsibilities || "",
                    location: job.location || "",
                    job_type: job.job_type,
                    deadline: job.deadline,
                  });
                  setShowEditDialog(true);
                }}
              >
                <Pencil className="mr-2 h-4 w-4" />
                ·ä†·àµ·â∞·ä´·ä≠·àç
              </Button>
              <Button
                variant="destructive"
                size="sm"
                onClick={() => {
                  setSelectedJob(job);
                  setShowDeleteDialog(true);
                }}
              >
                <Trash className="mr-2 h-4 w-4" />
                ·à∞·à≠·ãù
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      {/* Add Job Dialog */}
      <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>·ä†·ã≤·àµ ·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´</DialogTitle>
            <DialogDescription>
              ·ä•·â£·ä≠·ãé ·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç·äï ·ãù·à≠·ãù·àÆ·âΩ ·ã´·àµ·åà·â°
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="title">·ã®·àµ·à´ ·àò·ã∞·â•</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, title: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="description">·àµ·àà ·àµ·à´·ãç</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, description: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="requirements">·àò·àµ·çà·à≠·â∂·âΩ</Label>
              <Textarea
                id="requirements"
                value={formData.requirements || ""}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, requirements: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="responsibilities">·äÉ·àã·çä·äê·â∂·âΩ</Label>
              <Textarea
                id="responsibilities"
                value={formData.responsibilities || ""}
                onChange={(e) =>
                  setFormData((prev) => ({
                    ...prev,
                    responsibilities: e.target.value,
                  }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="location">·ä†·ãµ·à´·àª</Label>
              <Input
                id="location"
                value={formData.location || ""}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, location: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="job_type">·ã®·àµ·à´ ·ä†·ã≠·äê·âµ</Label>
              <Select
                value={formData.job_type}
                onValueChange={(value) =>
                  setFormData((prev) => ({
                    ...prev,
                    job_type: value as Job['job_type'],
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="full_time">·àô·àâ ·åä·ãú</SelectItem>
                  <SelectItem value="part_time">·âµ·à≠·çç ·åä·ãú</SelectItem>
                  <SelectItem value="contract">·äÆ·äï·âµ·à´·âµ</SelectItem>
                  <SelectItem value="internship">·àç·àù·àù·ãµ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="deadline">·ã®·àò·å®·à®·àª ·âÄ·äï</Label>
              <Input
                id="deadline"
                type="date"
                value={formData.deadline}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, deadline: e.target.value }))
                }
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowAddDialog(false)}>
              ·ã≠·âÖ·à≠
            </Button>
            <Button onClick={handleAddJob} disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              ·å®·àù·à≠
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Job Dialog */}
      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´ ·ä†·àµ·â∞·ä´·ä≠·àç</DialogTitle>
            <DialogDescription>
              ·ä•·â£·ä≠·ãé ·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´·ãç·äï ·ãù·à≠·ãù·àÆ·âΩ ·ã´·àµ·â∞·ä´·ä≠·àâ
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="edit-title">·ã®·àµ·à´ ·àò·ã∞·â•</Label>
              <Input
                id="edit-title"
                value={formData.title}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, title: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-description">·àµ·àà ·àµ·à´·ãç</Label>
              <Textarea
                id="edit-description"
                value={formData.description}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, description: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-requirements">·àò·àµ·çà·à≠·â∂·âΩ</Label>
              <Textarea
                id="edit-requirements"
                value={formData.requirements || ""}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, requirements: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-responsibilities">·äÉ·àã·çä·äê·â∂·âΩ</Label>
              <Textarea
                id="edit-responsibilities"
                value={formData.responsibilities || ""}
                onChange={(e) =>
                  setFormData((prev) => ({
                    ...prev,
                    responsibilities: e.target.value,
                  }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-location">·ä†·ãµ·à´·àª</Label>
              <Input
                id="edit-location"
                value={formData.location || ""}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, location: e.target.value }))
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-job_type">·ã®·àµ·à´ ·ä†·ã≠·äê·âµ</Label>
              <Select
                value={formData.job_type}
                onValueChange={(value) =>
                  setFormData((prev) => ({
                    ...prev,
                    job_type: value as Job['job_type'],
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="full_time">·àô·àâ ·åä·ãú</SelectItem>
                  <SelectItem value="part_time">·âµ·à≠·çç ·åä·ãú</SelectItem>
                  <SelectItem value="contract">·äÆ·äï·âµ·à´·âµ</SelectItem>
                  <SelectItem value="internship">·àç·àù·àù·ãµ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="edit-deadline">·ã®·àò·å®·à®·àª ·âÄ·äï</Label>
              <Input
                id="edit-deadline"
                type="date"
                value={formData.deadline}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, deadline: e.target.value }))
                }
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowEditDialog(false)}>
              ·ã≠·âÖ·à≠
            </Button>
            <Button onClick={handleEditJob} disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              ·ä†·àµ·â∞·ä´·ä≠·àç
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Job Dialog */}
      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´ ·à∞·à≠·ãù</DialogTitle>
            <DialogDescription>
              ·ä•·à≠·åç·å†·äõ ·äê·ãé·âµ ·ã≠·àÖ·äï ·ã®·àµ·à´ ·àõ·àµ·â≥·ãà·âÇ·ã´ ·àò·à∞·à®·ãù ·ã≠·çà·àç·åã·àâ?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowDeleteDialog(false)}>
              ·ã≠·âÖ·à≠
            </Button>
            <Button variant="destructive" onClick={handleDeleteJob} disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              ·à∞·à≠·ãù
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default JobsList; 